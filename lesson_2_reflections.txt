Q: A: How is the staging area different from the working directory and the repository? B: What value do you think it offers?
A A: Working directory contains files associated with the checkout commit. Staging area contains a subset you plan to commit (and can also contain files from other working directories). 
A B: Possibility to not commit all the changes files. 

Q: How can you use the staging area to make sure you have one commit per logical change?
A: by not adding all the files at once to your staging area

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: testing some new feature and ask stakeholders for feedback. In the meantime I can fix buges in the major version. 

Q: How do the diagrams help you visualize the branch structure?
A: It helps you do find out which commits are unreachable and get an overview of which commits belong to which branche.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: The changes from both branches were combined into one of the two branches. The diagram helps to better understand what happens. 

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: pro's: saves a lot of time, con's: potentially code can not compile anymore

Commands (thanks to Denyos):

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.